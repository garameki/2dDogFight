<!DOCTYPE html><html><head>
<script type='text/javascript'>FileRelative=function(fnBeUsed,fnUser){	this.bu=fnBeUsed;	this.u=fnUser;};FR=new Array();</script>
<script type='text/javascript' src='../../library/angleOppositeToXAxis.js'></script>
<script type='text/javascript' src='./library.js'></script>
<script type='text/javascript' src='./buttonStatic.js'></script>
<script type='text/javascript' src='./classModalWindow.js'></script>
<script type='text/javascript' src='./modalWindowInput3.js'></script>
<script type='text/javascript' src='./modalWindowYesNo2.js'></script>
<script type='text/javascript' src='./plate3.js'></script>

<script type='text/javascript'>

createContextHTM=null;
//必要なファイル
FR.push(new FileRelative('buttonStaticJS','createContextHTML'));
FR.push(new FileRelative('classModalWindowJS','createContextHTML'));
FR.push(new FileRelative('modalWindowInput3JS','createContextHTML'));
FR.push(new FileRelative('modalWindowYesNo2JS','createContextHTML'));
FR.push(new FileRelative('plate3JS','createContextHTML'));
FR.push(new FileRelative('libraryJS','createContextHTML'));





//onload内にscriptを加えないでください
//ロードチェッカー3秒間
onload=function(){
	var flag,count=0;var hoge = setInterval(function(){flag=true;for(var ii=0,len=FR.length;ii<len;ii++){flag = flag && (FR[ii].bu in window);if(!flag)break;};if(flag){	clearInterval(hoge);start();}else if(++count>30){clearInterval(hoge);console.error(FR[ii].u,"で使用する外部ファイル",FR[ii].bu,"が読み込まれていません");}},100);
};//onload



//スクリプト開始
var start = function(){


	//右クリックメニューを消す
	window.addEventListener('contextmenu',function(e){
//		e.stopPropagation();//第三引数がtrueだからcapturePhaseで一番最初に伝播をキャンセルするのはまずい
		e.preventDefault();
	},true);


//eleButtonCreate.style=''になっているのでDOM Explorerでチェックしてください。



	//メニューdiv
	var xMenu=0,yMenu=0;
	var eleMenu=document.createElement('div');
	var setMenu = function(x,y){
		eleMenu.setAttribute('style','background-color:rgba(0,0,0);position:absolute;left:'+x.toString()+'px;top:'+y.toString()+'px;z-index:'+Plate_numZindex().toString()+';');
	};
	setMenu(xMenu,yMenu);
	var eleButtonCreate = createButton(
		'CREATE',
		'black',
		'pink',
		'blue'
	);

	eleButtonCreate.addEventListener('click',function(event){
		event.stopPropagation();//windowで'click'を補足されて、divが切り離されるのを防ぐ
	});
	var mousedownMenu=false;
	var mousemoveMenu=false;
	var mouseX,mouseY;
	var left=xMenu,top=yMenu;
	eleButtonCreate.addEventListener('mousedown',function(event){
		mouseX=event.clientX;
		mouseY=event.clientY;
		xMenu=left;
		yMenu=top;
	
		mousedownMenu=true;

		event.stopPropagation();
	});
	eleButtonCreate.addEventListener('mouseup',function(event){
		if(gAnsModalWindow!=null && (mousedownMenu)){//modal windowが出ていてかつ、マウスボタンが押され続けている
			mwInput.setMessage('イベント名を入力してください');
			gAnsModalWindow=null;mwInput.appear();

			var hoge = setInterval(function(){
				if(gAnsModalWindow!=null && gAnsModalWindow!=''){
					clearInterval(hoge);
					//ここでPlateをつくる
					var a=new Plate(gAnsModalWindow);//kkkGCの対象にならないのでは？
					a=null;//クラス変数内の配列に保存済み
				}else if(gAnsModalWindow=='' || gAnsModalWindow!=null){
					clearInterval(hoge);
				};
			},100);
		};
		mousedownMenu=false;
		mousemoveMenu=false;
	});
	eleButtonCreate.addEventListener('mouseout',function(event){
		mousedownMenu=false;
		mousemoveMenu=false;
	});
	eleButtonCreate.addEventListener('mousemove',function(event){
		
		if(mousedownMenu || mousemoveMenu){
			mousemoveMenu=true;
			mousedownMenu=false;//一回動いたら、mouseupイベントでcreateさせない
console.log("$=",eleMenu.style.left);
			left=xMenu+event.clientX-mouseX;
			top=yMenu+event.clientY-mouseY;
			setMenu(left,top);
		};

		//event.stopPropagation();//文字の選択につかわれないようにする？→失敗
	});		

	eleMenu.appendChild(eleButtonCreate);


	gExistMenu=false;
	window.addEventListener('mousedown',function(event){
		if(gExistMenu){
			gExistMenu=false;
			document.getElementsByTagName('body')[0].removeChild(eleMenu);
		}else{
			gExistMenu=true;
			xMenu=left;
			yMenu=top;
			eleMenu.setAttribute('style','position:absolute;left:'+xMenu.toString()+'px;top:'+yMenu.toString()+'px;');
			document.getElementsByTagName('body')[0].appendChild(eleMenu);
		};
	});
	new Plate("1");//この書き方はメモリリークの原因になるのでは
	new Plate("2");
	new Plate("3");
};


</script>
<style type='text/css'>
button:hover{

}
</style>
</head><body style="font-size:25px;background-color:black;">
<div id="DivTop"></div></body></html>