<!DOCTYPE html><html><head><script type='text/javascript'>
//オーディオ構造体
var AudioStructure = function (name,filename){
	this.name = name;
	this.canplay=false;
	this.audio = new Audio(filename);
	var kkk=this;
	this.audio.oncanplaythrough = function () {
		kkk.canplay=true;
	};
	var counter=0;
	var hoge=setInterval(function(){
		counter++;
		if(kkk.canplay){
			clearInterval(hoge);
		}else if(counter>30){
			clearInterval(hoge);
			console.error("Sprite.js   ",name," : 音源が3秒以内にロードし終わりません。");
		};
	},100);
	this.playNow=false;
};
AudioStructure.prototype.play=function(){
	var counter=0;
	var kkk=this;
	var hoge=setInterval(function(){
		counter++;
		if(kkk.canplay){
//console.info(kkk.name," play start");
			clearInterval(hoge);
			kkk.audio.currentTime=0;
			kkk.audio.play();
			kkk.playNow=true;
			var hogehoge=setInterval(function(){
				if(kkk.audio.currentTime>=kkk.audio.duration){
					clearInterval(hogehoge);

					kkk.playNow=false;
				};
console.log(kkk.name);//,kkk.audio.currentTime,kkk.audio.duration,kkk.playNow);
			},100);


		}else if(counter>20){
			clearInterval(hoge);
			console.error("Sprite.js  ",kkk.name," : 音源が読み込まれていません。");
		};
	},100);
};

const numKataduke=-1;//「片付けと準備」の番号
const numJishuben=-2;//「自主勉または宿題」の番号

var newDate=new Date();
var yy =newDate.getFullYear();
var mM=newDate.getMonth();
var dd=newDate.getDate();
var hh = newDate.getHours();
var mm = newDate.getMinutes();
var timeInterval=2;//予定と予定の間

var $flagNext=true;

//var hh=19;
//var mm=30;
//console.log(new Date(yy,mM,dd,hh,mm));
console.log(hh,mm);

//構造体
var Con = function(number,timeInterval,name,next,front,timePoint,timePrepare,fileStart,fileName){//,fileEnd){
	this.color='black';

	this.number=number;
	this.name=name;
	this.timeInterval=timeInterval;
	this.next=next;
	this.front=front;
	if(timePoint==null)this.timePoint=null;
	else{
		var aa=Math.floor(timePoint);
		var bb=Math.floor((timePoint-aa)*100);
		this.timePoint=new Date(yy,mM,dd,aa,bb);
	};
	this.timePrepare=timePrepare;
	this.comment='';
	this.audioStart=new AudioStructure(name,fileStart);
	this.audioName=new AudioStructure(name,fileName);
//	this.audioEnd=fileEnd;
//console.log("timePrepare=",timePrepare);
};
Con.prototype.callStart = function(){

	this.audioStart.play();

};
Con.prototype.callName = function(){

	this.audioName.play();

};
var con = new Array();

//con.push(new Con(1,10,'ピアノ',		-1,-1,null,2,
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\pianoStart.m4a",
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\piano.m4a"
//));

//con.push(new Con(2,15,'基礎英語',		-1,-1,19.00,2,
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\kisoeigoStart.m4a",
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\kisoeigo.m4a"
//));

//con.push(new Con(3,20,'筋トレ',		7,-1,null,2,
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\kintoreStart.m4a",
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\kintore.m4a"
//));

con.push(new Con(4,10,'英語書き取り',		12,-1,null,2,
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\eigokakitoriStart.m4a",
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\eigokakitori.m4a"
));
con.push(new Con(5,10,'英単語帳',		-1,12,null,2,
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\eitangochouStart.m4a",
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\eitangochou.m4a"
));
con.push(new Con(6,10,'アナウンスセミナー',	-1,-1,null,2,
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\announceStart.m4a",
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\announce.m4a"
));
//con.push(new Con(7,20,'ごはん',		-1,3,null,2,
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\gohanStart.m4a",
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\gohan.m4a"
//));

//con.push(new Con(8,25,'風呂',13,9,21.30,0,
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\furoStart.m4a",
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\furo.m4a"
//));

//con.push(new Con(9,10,'いっぷく',8,-1,null,0,
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\ippukuStart.m4a",
//	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\ippuku.m4a"
//));

con.push(new Con(9,10,'いっぷく',13,-1,null,0,
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\ippukuStart.m4a",
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\ippuku.m4a"
));

con.push(new Con(10,10,'スクラッチ',-1,-1,null,2,
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\scratchStart.m4a",
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\scratch.m4a"
));
con.push(new Con(11,10,'キートン',		-1,-1,null,0,
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\kiitonStart.m4a",
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\kiiton.m4a"
));
con.push(new Con(12,3,'英語スピーチ',5,4,null,0,
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\speechStart.m4a",
	"C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\speech.m4a"
));

//con.push(new Con(13,0,'就寝',-1,8,22.0,5));

con.push(new Con(13,0,'就寝',-1,9,22.0,5));

//con.push(new Con(14,150,'あそび',-1,-1,null,0));
//con.push(new Con(12,'宿題',-1,-1,-1,null));


var pp = new Array();












//小数形式の時刻を時間と分に分ける
var changeTimePointToAABB= function(tp){
	var aa=Math.floor(tp);
	var bb=Math.floor((tp-aa)*100);
	return {hh:aa,mm:bb};
};

//test = changeTimePointToAABB(12.5);
//console.log(test.hh);

var searchArrByNumber = function(arr,number){
//console.log("***");
	var num=-1;
//console.log(arr);
//for(var ii=0;ii<arr.length;ii++)console.log(arr[ii].number);
	for(var ii=0;ii<arr.length;ii++){
		if(arr[ii].number==number){
			num=ii;
			break;
		};
	};
	return num;
};


var print = function(tag,arr){
//	var res,aa,bb,hhh,mmm;
//console.log(yy,mM,dd,hh,mm);
	var date=new Date(yy,mM,dd,hh,mm);
	hhh=date.getHours();
	mmm=date.getMinutes();
	acc="現在時刻："+hhh+"時"+mmm+"分<br><table><tr style='text-align:center;'><td>科目<td>スタート時刻<td>&nbsp&nbsp&nbsp時間<td>コメント";
	for(var ii=0;ii<arr.length;ii++){
		if(arr[ii].timePoint==null){
			acc+="<tr style='text-align:center;'><td>"+arr[ii].name+"<td><td>"+arr[ii].timeInterval+"分間<td>"+arr[ii].comment;
		}else{
//			res = changeTimePointToAABB(arr[ii].timePoint);
			var hhh="0"+arr[ii].timePoint.getHours().toString();
			hhh=hhh.slice(-2);
			var mmm="0"+arr[ii].timePoint.getMinutes().toString();
			mmm=mmm.slice(-2);
			acc+="<tr style='text-align:center;color:"+arr[ii].color+";'><td>"+arr[ii].name+"<td>"+hhh+"時"+mmm+"分<td style='text-align:right;'>"+arr[ii].timeInterval+"分間<td style='text-align:left;'>"+arr[ii].comment;
		};
	};
	tag.innerHTML=acc;
};

var print2 = function(tag,arr){
	var hhh,mmm,acc;
	var date=new Date(yy,mM,dd,hh,mm);
	hhh=date.getHours();
	mmm=date.getMinutes();
	acc="現在時刻："+hhh+"時"+mmm+"分<br><table><tr style='text-align:center;'><td>科目<td>スタート時刻<td>&nbsp&nbsp&nbsp時間<td>コメント";
	for(var ii=0;ii<arr.length;ii++){
		for(var kk=0;kk<arr[ii].cons.length;kk++){
			if(arr[ii].cons[kk].timePoint==null){
				acc+="<tr style='text-align:center;'><td>"+arr[ii].cons[kk].name+"<td><td>"+arr[ii].cons[kk].timeInterval+"分間<td>"+arr[ii].cons[kk].comment;
			}else{
//				res = changeTimePointToAABB(arr[ii].cons[kk].timePoint);
				hhh="0"+arr[ii].cons[kk].timePoint.getHours().toString();
				hhh=hhh.slice(-2);
				mmm="0"+arr[ii].cons[kk].timePoint.getMinutes().toString();
				mmm=mmm.slice(-2);
				acc+="<tr style='text-align:center;color:"+arr[ii].cons[kk].color+";'><td>"+arr[ii].cons[kk].name+"<td>"+hhh+"時"+mmm+"分<td style='text-align:right;'>"+arr[ii].cons[kk].timeInterval+"分間<td style='text-align:left;'>"+arr[ii].cons[kk].comment;
			};
		};
	};
	tag.innerHTML=acc;
};



var sortTimePoint = function(arr){

	var newArr=new Array();

	var minNum;
	while(arr.length>0){
		minNum=0;
		for(var kk=1;kk<arr.length;kk++)
			if(arr[minNum].timePoint>arr[kk].timePoint){
				minNum=kk;
			};
		newArr.push(arr[minNum]);		
		arr.splice(minNum,1);
	};
	return newArr;

};


var addTimePrepare=function(arrC){
//console.log("con=",arrC);
	for(var ii=0;ii<arrC.length;ii++)arrC[ii].timeInterval+=arrC[ii].timePrepare;
	return arrC;
};

//時間が決まっているものとそのnextsを抽出
var abstractTimePoint = function(arr){
	var canArr=new Array();
	var kk,front;
	var res,aa,bb;
	for(var ii=0;ii<arr.length;ii++){
		//時間が決まっている最初の番を抽出
//console.log("timePoint=",arr[ii].timePoint);
		if(arr[ii].timePoint==null){
			//時刻指定なし
			//do nothing
		}else{
//console.log("*");
			//時刻指定あり

			//前に決まった予定があるか？
			kk=ii;
			front=arr[ii].front;
			while(front!=-1){

				//まえがある
				kk=searchArrByNumber(con,front);
				if(kk==-1)console.error("number=",front,"が見つかりません3");
				if(arr[kk].timePoint==null){//frontのノードに時刻は設定されているか
					//されていない
					//さかのぼって時刻を設定しちゃう
					aa=arr[ii].timePoint.getHours();
//console.log(arr[ii].name,arr[ii].timePoint);
//console.log(arr[kk].name,arr[kk].timeInterval);
					bb=arr[ii].timePoint.getMinutes()-arr[kk].timeInterval;
//console.log(bb);
					arr[kk].timePoint = (new Date(yy,mM,dd,aa,bb));
				}else{
					//されている
					//do nothing
				};
					
				front=arr[kk].front;
//console.log(front);
			};
			//前がない
			//候補に挙がってなければ候補にする
			num=searchArrByNumber(canArr,arr[kk].number);
			if(num==-1)canArr.push(arr[kk]);
		};
	};
	//抽出するものをarrから削除
	var num;
	for(var ii=0;ii<canArr.length;ii++){
		num = searchArrByNumber(arr,canArr[ii].number);
		arr.splice(num,1);
	};
	return {abstracted:canArr,rest:arr};
};

var abstractNext = function(arrP,arrC){
	var num,next;
	var newArr=new Array();
	for(var ii=0;ii<arrP.length;ii++){
		newArr.push(arrP[ii]);
		next=arrP[ii].next;
		while(next!=-1){//nextのものをnewArrに抽出
			num=searchArrByNumber(arrC,next);
			if(num==-1)console.log("name=",next,"がないですよ");
			newArr.push(arrC[num]);
			next=arrC[num].next;
			arrC.splice(num,1);
		};
	};
	return {abstracted:newArr,rest:arrC};
};

var checkTimePoint = function(arr){
	var hhh,mmm,timeP;

	var date = new Date(yy,mM,dd,hh,mm);
	for(var ii=0;ii<arr.length;ii++)
		if(date>arr[ii].timePoint){
			console.error("name=",arr[ii].name,"指定時刻を過ぎているノードです");
			arr[ii].color='red';
		};
	for(var ii=0;ii<arr.length-1;ii++){
		hhh=arr[ii].timePoint.getHours();
		mmm=arr[ii].timePoint.getMinutes();
		mmm=mmm+arr[ii].timeInterval;
		timeP=new Date(yy,mM,dd,hhh,mmm);
//console.log("timeP=",timeP);
//console.log(arr[ii+1].timePoint);
		if(timeP>arr[ii+1].timePoint){
			console.error("時間指定に矛盾があります");
			arr[ii+1].color='red';
			arr[ii+1].comment='時刻が重なっています';

		};
	};

};

var insertInterval = function(arrP){
	var newArr=new Array();
	var dist,hhh,mmm;
	var dateNow=new Date(yy,mM,dd,hh,mm);
	var date=dateNow;
	for(var ii=0;ii<arrP.length;ii++){
//console.log("timePoint=",arrP[ii].timePoint);
//console.log("date=",date);
		dist=(arrP[ii].timePoint - date)/60000;
//console.log("dist=",dist);
		if(dist>0)newArr.push(new Con(numJishuben,dist,'自主勉または宿題',-1,-1,null,2,
		"","C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\jishuben.m4a"));//この関数内ではまだ開始時刻は入れない
		newArr.push(arrP[ii]);
		hhh=arrP[ii].timePoint.getHours();
		mmm=arrP[ii].timePoint.getMinutes();
//console.log(yy);
//console.log(mM);
//console.log(dd);
		date=new Date(yy,mM,dd,hhh,mmm+arrP[ii].timeInterval);
		dist=date-dateNow;
		if(dist<0)date=dateNow;
			
//console.log("date=",date);
	};
	
	return newArr;

};

//構造体
var Serial = function(){
	this.cons = new Array();
};
Serial.prototype.length = function(){
	var sum=0;
	for(var ii=0;ii<this.cons.length;ii++)
		sum+=this.cons[ii].timeInterval;
	return sum;
};


var makeSerial = function(arr){
	var arrSerial = new Array();
	var iiSerial=0;
	var ii=0;
	var kk=0,front,next;
	while(arr.length>0){
		kk=0;
		front=arr[kk].front;
		while(front!=-1){
			kk=searchArrByNumber(arr,front);
			if(kk==-1)console.error("front=",front,"が見つかりません1");
			front=arr[kk].front;
		};
		arrSerial.push(new Serial());
//console.log("name=",arr[kk].name);

		next=arr[kk].next;
		arrSerial[iiSerial].cons.push(arr[kk]);
		arr.splice(kk,1);
		while(next!=-1){
//console.log("next=",next);
			kk=searchArrByNumber(arr,next);
			if(kk==-1)console.error("front=",front,"が見つかりません2");
			arrSerial[iiSerial].cons.push(arr[kk]);
//console.log("kk=",kk);
			next=arr[kk].next;
			arr.splice(kk,1);
		};
		iiSerial++;
	};
	return arrSerial;
};

//conSerialの中のものに「準備と片付け」を挿入(時刻は設定しない)
var insertKatadukeIntoConSerial =function(arr){
	var newCon;
	for(var ii=0;ii<arr.length;ii++)
		for(var kk=0;kk<arr[ii].cons.length;kk++){
			if(arr[ii].cons[kk].timePrepare>0){
				newCon=(new Con(numKataduke,arr[ii].cons[kk].timePrepare,'片付けと準備',-1,-1,null,0));
				newCon.color='blue';
				arr[ii].cons[kk].timeInterval-=arr[ii].cons[kk].timePrepare;
				arr[ii].cons.splice(kk,0,newCon);
				kk++;
			};
		};

	return arr;
};


//準備時間を挿入する
var insertPrepare = function(arr){


	var hhh,mmm,ddd,date,newCon;
	for(var ii=0;ii<arr.length;ii++){
//console.log("name=",arr[ii].name,arr[ii].timePrepare);

		if(arr[ii].timePrepare>0){
			newCon=(new Con(numKataduke,arr[ii].timePrepare,'片付けと準備',-1,-1,null,0));
			newCon.color='blue';
			arr.splice(ii,0,newCon);
//console.log("name=",arr[ii].name,arr[ii].timePrepare);
//console.log("name=",arr[ii+1].name,arr[ii].timePrepare);

			//arr[ii].timePointを計算
			hhh=arr[ii+1].timePoint.getHours();
			mmm=arr[ii+1].timePoint.getMinutes();
			ddd=arr[ii+1].timePrepare;
			date=new Date(yy,mM,dd,hhh,mmm-ddd);
			arr[ii].timePoint=date;
			arr[ii+1].timeInterval-=arr[ii+1].timePrepare;
			arr[ii+1].timePrepare=0;
			ii++;
		};
	};
	return arr;
};






var replace = function(arrP,arrS){
	var nLast,hhh,mmm,dist;
	var kk,num;
	var count,n;
	var dateNow=new Date(yy,mM,dd,hh,mm);
	var date;
	var newArr=new Array();
	for(var ii=0;ii<arrP.length;ii++){
		if(arrP[ii].number!=numJishuben){//Intervalか？
			//not Interval
			newArr.push(arrP[ii]);
		}else{
			//Interval
			count=0;
			n=arrS.length;
			while(count++<n*10 && arrS.length>0){
			
				num=Math.floor(Math.random()*100)%arrS.length;
				if(arrS[num].length()<arrP[ii].timeInterval){
//console.log(arrS[num].length(),arrP[ii].timeInterval);
					//時間がIntervalのtimeIntervalより短いのでnewArrにarrS[num].consを入れる
					for(var kk=0;kk<arrS[num].cons.length;kk++){
						nLast=newArr.length-1;
						if(nLast<0){
//console.log("***");
							//前なし
							arrS[num].cons[0].timePoint=dateNow;
							newArr.push(arrS[num].cons[0]);
console.log("push1   newArr[-1].name=",newArr[newArr.length-1].name);
							arrP[ii].timeInterval-=arrS[num].cons[0].timeInterval;
console.log("push　はじめて(arrS)name=",arrS[num].cons[0].name);
							arrS[num].cons.splice(0,1);
							kk--;
						}else{
//console.log("$$$");
							//前あり
							//時刻を過ぎていないところまで進む
//開始時刻は過ぎていても、途中の場合がある。（ラジオ講座とか）
//とりあえずここに条件を入れる



//console.log("newArr[",nLast,"].name=",newArr[nLast].name,"時刻timePoint=",newArr[nLast].timePoint);

							hhh=newArr[nLast].timePoint.getHours();
							mmm=newArr[nLast].timePoint.getMinutes();
							dist=newArr[nLast].timeInterval;
							date=new Date(yy,mM,dd,hhh,mmm+dist);
							if(date<dateNow)date=dateNow;	
							arrS[num].cons[kk].timePoint=date;
							newArr.push(arrS[num].cons[kk]);
//console.log("push5 name=",newArr[newArr.length-1].name);
						};	
					};
//console.log(arrS[num].length(),arrP[ii].timeInterval);
//console.log("-");
					arrP[ii].timeInterval-=arrS[num].length();
					arrS.splice(num,1);
				};
			};

			//Intervalに詰め終わったあと、まだ時間があまっていたら、これもnewArrにいれておく
			if(arrP[ii].timeInterval>0){
				nLast=newArr.length-1;
				if(nLast<0){
					//前なし
					arrP[ii].timePoint=new Date(yy,mM,dd,hh,mm);
					newArr.push(arrP[ii]);
console.log("push 初めて   newArr[-1].name=",newArr[newArr.length-1].name);
				}else{
					hhh=newArr[nLast].timePoint.getHours();
					mmm=newArr[nLast].timePoint.getMinutes();
					dist=newArr[nLast].timeInterval;
					arrP[ii].timePoint=new Date(yy,mM,dd,hhh,mmm+dist);
					newArr.push(arrP[ii]);
console.log("push3   newArr[-1].name=",newArr[newArr.length-1].name);

				};
			};






		};
	};
	return newArr;
};

var searchNow = function(arr){

	var dateNow=new Date(yy,mM,dd,hh,mm);
	for(var ii=0;ii<arr.length;ii++)
		if(arr[ii].timePoint==null)console.error("arr[",ii,"].name=",arr[ii].name,"    timePointがnullです。");
		else if(dateNow>arr[ii].timePoint)break;

	if(ii==arr.length)return null;
	else return ii;
};

var waitPlayName = function(n1,n2){
	var hogeA,hogeB;
	var hogeA = setInterval(function(){
		if(n1.audioName.playNow){
			clearInterval(hogeA);
			var hogeB=setInterval(function(){
				if(!n1.audioName.playNow){
					clearInterval(hogeB);
					n2.callName();
				};
			},100);
		};
	},100);
};

var CallJutsugo = function (name,file) {

console.log("*",name);
	var jutsugo = new Con(null,null,name,null,null,null,null,"",file);
	var pinpon = new Con(null,null,"ピンポン",null,null,null,null,"","C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\pinponpanpon.mp3");
console.log("*",jutsugo);
	return function(node){
		pinpon.callName();
		waitPlayName(pinpon,node);
		waitPlayName(node,jutsugo);
	};

};
var callStart = new CallJutsugo("をはじめてください。","C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\wohajimetekudasai.m4a");
var callJunbi = new CallJutsugo("の準備をはじめてください。","C:\\Users\\usaku\\Documents\\games\\schedule\\sounds\\nojunbiwohajimetekudasai.m4a");


var voice = function(ii,arr){
	if(false){
		//nothing
	}else if(ii==arr.length){
		//すべての予定は開始時刻を過ぎている
		console.log("全ての予定は終了しました");
	}else if(ii==0){
		//最初のノード
		if(ii+1==arr.length){
			//最初で最後のノード
			if(arr[ii].number==numKataduke){
				//片付け
				console.error("片付けが最後のノードということはありえない");
			}else if(arr[ii].number==numJishuben){
				//自主勉または宿題
				console.log(arr[ii].name,"をはじめてください");
				callStart(arr[ii]);
			}else{
				//予定
				console.log(arr[ii].name,"をはじめてください");
				callStart(arr[ii]);
			};
		}else{
			//最初だけど、最後ではないノード
			if(arr[ii].number==numKataduke){
				//片付け
				console.log(arr[ii+1].name,"の準備をはじめてください");
				callJunbi(arr[ii+1]);
			}else if(arr[ii].number==numJishuben){
				//自主勉または宿題
				console.log(arr[ii].name,"をはじめてください");
				callStart(arr[ii]);
			}else{
				//予定
				console.log(arr[ii].name,"をはじめてください");
				callStart(arr[ii]);
			};
		
		};
	}else{
		//最初ではないノード
		if(ii==arr.length-1){
			//最後のノード
			if(arr[ii].number==numKataduke){
				//片付け
				console.error("片付けが最後ということはありえません");
			}else if(arr[ii].number==numJishuben){
				//自主勉または宿題
				console.log(arr[ii].namearr[ii].name,"をはじめてください");
				callStart(arr[ii]);
			}else{
				//予定
				console.log(arr[ii].namearr[ii].name,"をはじめてください");
				callStart(arr[ii]);
			};
		}else{
			//最後ではない
			if(arr[ii].number==numKataduke){
				//片付け
				console.log(arr[ii+1].name,"の準備をしてください");
				callJunbi(arr[ii+1]);
			}else if(arr[ii].number==numJishuben){
				//自主勉または宿題
				console.log(arr[ii].name,"をはじめてください");
				callStart(arr[ii]);
			}else{
				//予定
				console.log(arr[ii].name,"をはじめてください");
				callStart(arr[ii]);
			};
		};
	};
};

var firstCall=function(arr){
//for(var ii=0;ii<arr.length;ii++)console.log("***",ii,arr[ii].name,arr[ii].number);
	var dateNow=new Date(yy,mM,dd,hh,mm);//現在時刻を取得

	//どこまですすんでいるか
	for(var ii=0;ii<arr.length;ii++)
		if(dateNow<arr[ii].timePoint){
			ii--;
			break;
		};
//console.log("newDate=",newDate);
//console.log("ii=",ii);


	voice(ii,arr);		
	console.log("ii=",ii,"start point name=",arr[ii].name);

	var hoge=setInterval(function(){
		
		//どこまですすんでいるか
		dateNow=new Date(yy,mM,dd,hh,mm);
		for(var kk=0;kk<arr.length;kk++)
			if(dateNow<arr[kk].timePoint){
				kk--;
				break;
			};
		if(ii!=kk){
			//スケジュールが進んだ
			voice(kk,arr);
			ii=kk;
		};

		if(kk==arr.length-1){
			console.log("スケジュールは全て終了しました。");
			clearInterval(hoge);
		};
	},1000);

};

//準備がひつようなものに準備時間を足してしまう
con = addTimePrepare(con);

//時間が決まっているものの最初を抽出
var res = abstractTimePoint(con);
con=res.rest;
pp=res.abstracted;



//時刻でソート
pp = sortTimePoint(pp);

//次の指定を抽出
res = abstractNext(pp,con);
pp=res.abstracted;
con=res.rest;

//時間に矛盾がないかチェック
checkTimePoint(pp);

//本体に準備時間を設ける
pp=insertPrepare(pp);


//インターバル時間を挿入
pp=insertInterval(pp);


//conの中身を連続なものにまとめる
var conSerial=makeSerial(con);

for(var ii=0;ii<conSerial.length;ii++)console.log("conSerial=",conSerial[ii].cons[0].name," length=",conSerial[ii].length());

//連続にまとめたものに準備時間を設ける
conSerial = insertKatadukeIntoConSerial(conSerial);


//インターバル時間をノードに置き換える
pp=replace(pp,conSerial);



firstCall(pp);










onload = function(){

	print(Test,pp);
	if(con.length>0)print(Test2,con);
	if(conSerial.length>0)print2(Test3,conSerial);
	var hoge=setInterval(function(){
		print(Test,pp);
		if(con.length>0)print(Test2,con);
		if(conSerial.length>0)print2(Test3,conSerial);
		mm++;
	},60000);
};








</script></head><body><div>
<p id="Test" style='font-size:30px;'></p>
<p id="Test2" style='font-size:30px;'></p>
<p id="Test3" style='font-size:30px;'></p>
</div></body></html>